//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing.AuthServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthServiceReference.IAuthorizationService")]
    public interface IAuthorizationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/DoesUserExist", ReplyAction="http://tempuri.org/IAuthorizationService/DoesUserExistResponse")]
        bool DoesUserExist(string l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/DoesUserExist", ReplyAction="http://tempuri.org/IAuthorizationService/DoesUserExistResponse")]
        System.Threading.Tasks.Task<bool> DoesUserExistAsync(string l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/GetUserStatus", ReplyAction="http://tempuri.org/IAuthorizationService/GetUserStatusResponse")]
        string GetUserStatus(string l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/GetUserStatus", ReplyAction="http://tempuri.org/IAuthorizationService/GetUserStatusResponse")]
        System.Threading.Tasks.Task<string> GetUserStatusAsync(string l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/Login", ReplyAction="http://tempuri.org/IAuthorizationService/LoginResponse")]
        bool Login(string l, string p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizationService/Login", ReplyAction="http://tempuri.org/IAuthorizationService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string l, string p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorizationServiceChannel : Testing.AuthServiceReference.IAuthorizationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizationServiceClient : System.ServiceModel.ClientBase<Testing.AuthServiceReference.IAuthorizationService>, Testing.AuthServiceReference.IAuthorizationService {
        
        public AuthorizationServiceClient() {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DoesUserExist(string l) {
            return base.Channel.DoesUserExist(l);
        }
        
        public System.Threading.Tasks.Task<bool> DoesUserExistAsync(string l) {
            return base.Channel.DoesUserExistAsync(l);
        }
        
        public string GetUserStatus(string l) {
            return base.Channel.GetUserStatus(l);
        }
        
        public System.Threading.Tasks.Task<string> GetUserStatusAsync(string l) {
            return base.Channel.GetUserStatusAsync(l);
        }
        
        public bool Login(string l, string p) {
            return base.Channel.Login(l, p);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string l, string p) {
            return base.Channel.LoginAsync(l, p);
        }
    }
}
